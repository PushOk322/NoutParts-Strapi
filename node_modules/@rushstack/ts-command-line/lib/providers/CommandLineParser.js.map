{"version":3,"file":"CommandLineParser.js","sourceRoot":"","sources":["../../src/providers/CommandLineParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport type * as argparse from 'argparse';\r\nimport colors from 'colors';\r\n\r\nimport type { CommandLineAction } from './CommandLineAction';\r\nimport type { AliasCommandLineAction } from './AliasCommandLineAction';\r\nimport {\r\n  CommandLineParameterProvider,\r\n  type IRegisterDefinedParametersState,\r\n  type ICommandLineParserData\r\n} from './CommandLineParameterProvider';\r\nimport { CommandLineParserExitError, CustomArgumentParser } from './CommandLineParserExitError';\r\nimport { TabCompleteAction } from './TabCompletionAction';\r\n\r\n/**\r\n * Options for the {@link CommandLineParser} constructor.\r\n * @public\r\n */\r\nexport interface ICommandLineParserOptions {\r\n  /**\r\n   * The name of your tool when invoked from the command line\r\n   */\r\n  toolFilename: string;\r\n\r\n  /**\r\n   * General documentation that is included in the \"--help\" main page\r\n   */\r\n  toolDescription: string;\r\n\r\n  /**\r\n   * An optional string to append at the end of the \"--help\" main page. If not provided, an epilog\r\n   * will be automatically generated based on the toolFilename.\r\n   */\r\n  toolEpilog?: string;\r\n\r\n  /**\r\n   * Set to true to auto-define a tab completion action. False by default.\r\n   */\r\n  enableTabCompletionAction?: boolean;\r\n}\r\n\r\n/**\r\n * The \"argparse\" library is a relatively advanced command-line parser with features such\r\n * as word-wrapping and intelligible error messages (that are lacking in other similar\r\n * libraries such as commander, yargs, and nomnom).  Unfortunately, its ruby-inspired API\r\n * is awkward to use.  The abstract base classes CommandLineParser and CommandLineAction\r\n * provide a wrapper for \"argparse\" that makes defining and consuming arguments quick\r\n * and simple, and enforces that appropriate documentation is provided for each parameter.\r\n *\r\n * @public\r\n */\r\nexport abstract class CommandLineParser extends CommandLineParameterProvider {\r\n  /**\r\n   * Reports which CommandLineAction was specified on the command line.\r\n   * @remarks\r\n   * The value will be assigned before onExecute() is invoked.\r\n   */\r\n  public selectedAction: CommandLineAction | undefined;\r\n\r\n  private readonly _argumentParser: argparse.ArgumentParser;\r\n  private _actionsSubParser: argparse.SubParser | undefined;\r\n  private readonly _options: ICommandLineParserOptions;\r\n  private readonly _actions: CommandLineAction[];\r\n  private readonly _actionsByName: Map<string, CommandLineAction>;\r\n  private _executed: boolean = false;\r\n  private _tabCompleteActionWasAdded: boolean = false;\r\n\r\n  public constructor(options: ICommandLineParserOptions) {\r\n    super();\r\n\r\n    this._options = options;\r\n    this._actions = [];\r\n    this._actionsByName = new Map<string, CommandLineAction>();\r\n\r\n    this._argumentParser = new CustomArgumentParser({\r\n      addHelp: true,\r\n      prog: this._options.toolFilename,\r\n      description: this._options.toolDescription,\r\n      epilog: colors.bold(\r\n        this._options.toolEpilog ??\r\n          `For detailed help about a specific command, use: ${this._options.toolFilename} <command> -h`\r\n      )\r\n    });\r\n\r\n    this.onDefineParameters?.();\r\n  }\r\n\r\n  /**\r\n   * Returns the list of actions that were defined for this CommandLineParser object.\r\n   */\r\n  public get actions(): ReadonlyArray<CommandLineAction> {\r\n    return this._actions;\r\n  }\r\n\r\n  /**\r\n   * Defines a new action that can be used with the CommandLineParser instance.\r\n   */\r\n  public addAction(action: CommandLineAction): void {\r\n    if (!this._actionsSubParser) {\r\n      this._actionsSubParser = this._argumentParser.addSubparsers({\r\n        metavar: '<command>',\r\n        dest: 'action'\r\n      });\r\n    }\r\n\r\n    action._buildParser(this._actionsSubParser);\r\n    this._actions.push(action);\r\n    this._actionsByName.set(action.actionName, action);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the action with the specified name.  If no matching action is found,\r\n   * an exception is thrown.\r\n   */\r\n  public getAction(actionName: string): CommandLineAction {\r\n    const action: CommandLineAction | undefined = this.tryGetAction(actionName);\r\n    if (!action) {\r\n      throw new Error(`The action \"${actionName}\" was not defined`);\r\n    }\r\n    return action;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the action with the specified name.  If no matching action is found,\r\n   * undefined is returned.\r\n   */\r\n  public tryGetAction(actionName: string): CommandLineAction | undefined {\r\n    return this._actionsByName.get(actionName);\r\n  }\r\n\r\n  /**\r\n   * The program entry point will call this method to begin parsing command-line arguments\r\n   * and executing the corresponding action.\r\n   *\r\n   * @remarks\r\n   * The returned promise will never reject:  If an error occurs, it will be printed\r\n   * to stderr, process.exitCode will be set to 1, and the promise will resolve to false.\r\n   * This simplifies the most common usage scenario where the program entry point doesn't\r\n   * want to be involved with the command-line logic, and will discard the promise without\r\n   * a then() or catch() block.\r\n   *\r\n   * If your caller wants to trap and handle errors, use {@link CommandLineParser.executeWithoutErrorHandling}\r\n   * instead.\r\n   *\r\n   * @param args - the command-line arguments to be parsed; if omitted, then\r\n   *               the process.argv will be used\r\n   */\r\n  public async execute(args?: string[]): Promise<boolean> {\r\n    if (this._options.enableTabCompletionAction && !this._tabCompleteActionWasAdded) {\r\n      this.addAction(new TabCompleteAction(this.actions, this.parameters));\r\n      this._tabCompleteActionWasAdded = true;\r\n    }\r\n\r\n    try {\r\n      await this.executeWithoutErrorHandling(args);\r\n      return true;\r\n    } catch (err) {\r\n      if (err instanceof CommandLineParserExitError) {\r\n        // executeWithoutErrorHandling() handles the successful cases,\r\n        // so here we can assume err has a nonzero exit code\r\n        if (err.message) {\r\n          // eslint-disable-next-line no-console\r\n          console.error(err.message);\r\n        }\r\n        if (!process.exitCode) {\r\n          process.exitCode = err.exitCode;\r\n        }\r\n      } else {\r\n        let message: string = ((err as Error).message || 'An unknown error occurred').trim();\r\n\r\n        // If the message doesn't already start with \"Error:\" then add a prefix\r\n        if (!/^(error|internal error|warning)\\b/i.test(message)) {\r\n          message = 'Error: ' + message;\r\n        }\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.error();\r\n        // eslint-disable-next-line no-console\r\n        console.error(colors.red(message));\r\n\r\n        if (!process.exitCode) {\r\n          process.exitCode = 1;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is similar to {@link CommandLineParser.execute}, except that execution errors\r\n   * simply cause the promise to reject.  It is the caller's responsibility to trap\r\n   */\r\n  public async executeWithoutErrorHandling(args?: string[]): Promise<void> {\r\n    try {\r\n      if (this._executed) {\r\n        // In the future we could allow the same parser to be invoked multiple times\r\n        // with different arguments.  We'll do that work as soon as someone encounters\r\n        // a real world need for it.\r\n        throw new Error('execute() was already called for this parser instance');\r\n      }\r\n      this._executed = true;\r\n\r\n      this._validateDefinitions();\r\n\r\n      // Register the parameters before we print help or parse the CLI\r\n      const initialState: IRegisterDefinedParametersState = {\r\n        parentParameterNames: new Set()\r\n      };\r\n      this._registerDefinedParameters(initialState);\r\n\r\n      if (!args) {\r\n        // 0=node.exe, 1=script name\r\n        args = process.argv.slice(2);\r\n      }\r\n      if (this.actions.length > 0) {\r\n        if (args.length === 0) {\r\n          // Parsers that use actions should print help when 0 args are provided. Allow\r\n          // actionless parsers to continue on zero args.\r\n          this._argumentParser.printHelp();\r\n          return;\r\n        }\r\n        // Alias actions may provide a list of default params to add after the action name.\r\n        // Since we don't know which params are required and which are optional, perform a\r\n        // manual search for the action name to obtain the default params and insert them if\r\n        // any are found. We will guess that the action name is the first arg that doesn't\r\n        // start with a hyphen.\r\n        const actionNameIndex: number | undefined = args.findIndex((x) => !x.startsWith('-'));\r\n        if (actionNameIndex !== undefined) {\r\n          const actionName: string = args[actionNameIndex];\r\n          const action: CommandLineAction | undefined = this.tryGetAction(actionName);\r\n          const aliasAction: AliasCommandLineAction | undefined = action as AliasCommandLineAction;\r\n          if (aliasAction?.defaultParameters?.length) {\r\n            const insertIndex: number = actionNameIndex + 1;\r\n            args = args.slice(0, insertIndex).concat(aliasAction.defaultParameters, args.slice(insertIndex));\r\n          }\r\n        }\r\n      }\r\n\r\n      const data: ICommandLineParserData = this._argumentParser.parseArgs(args);\r\n\r\n      this._processParsedData(this._options, data);\r\n\r\n      this.selectedAction = this.tryGetAction(data.action);\r\n      if (this.actions.length > 0 && !this.selectedAction) {\r\n        const actions: string[] = this.actions.map((x) => x.actionName);\r\n        throw new Error(`An action must be specified (${actions.join(', ')})`);\r\n      }\r\n\r\n      this.selectedAction?._processParsedData(this._options, data);\r\n      await this.onExecute();\r\n    } catch (err) {\r\n      if (err instanceof CommandLineParserExitError) {\r\n        if (!err.exitCode) {\r\n          // non-error exit modeled using exception handling\r\n          if (err.message) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(err.message);\r\n          }\r\n\r\n          return;\r\n        }\r\n      }\r\n\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  public _registerDefinedParameters(state: IRegisterDefinedParametersState): void {\r\n    super._registerDefinedParameters(state);\r\n\r\n    const { parentParameterNames } = state;\r\n    const updatedParentParameterNames: Set<string> = new Set([\r\n      ...parentParameterNames,\r\n      ...this._registeredParameterParserKeysByName.keys()\r\n    ]);\r\n\r\n    const parentState: IRegisterDefinedParametersState = {\r\n      ...state,\r\n      parentParameterNames: updatedParentParameterNames\r\n    };\r\n    for (const action of this._actions) {\r\n      action._registerDefinedParameters(parentState);\r\n    }\r\n  }\r\n\r\n  private _validateDefinitions(): void {\r\n    if (this.remainder && this.actions.length > 0) {\r\n      // This is apparently not supported by argparse\r\n      throw new Error('defineCommandLineRemainder() cannot be called for a CommandLineParser with actions');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@inheritDoc CommandLineParameterProvider._getArgumentParser}\r\n   * @internal\r\n   */\r\n  protected _getArgumentParser(): argparse.ArgumentParser {\r\n    // override\r\n    return this._argumentParser;\r\n  }\r\n\r\n  /**\r\n   * This hook allows the subclass to perform additional operations before or after\r\n   * the chosen action is executed.\r\n   */\r\n  protected async onExecute(): Promise<void> {\r\n    if (this.selectedAction) {\r\n      await this.selectedAction._execute();\r\n    }\r\n  }\r\n}\r\n"]}